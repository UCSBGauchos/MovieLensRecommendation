Project Name: Collaborative Filtering comparison based on the Movielens data set
Author: Bo Yang
DataSet: http://movielens.org/login (MovieLens Dataset)

Key words: 
Hadoop, JAVA, recommendation, machine learning

Instruction:
Recommondation algorithm has become more and more important in today's machine learning region. There are many collaborative filtering algorithms. Some are memory-based, which are based on the similarities between KNN items or users. Some are model-based, which are based on the training models. And a new method is based on the tendency of items or movies, which is very fast and efficent. The goal of this project is try to implement three classic CF algorithms, one new CF algorithms, and compare their accuracy.

Future Work: More recommendation algorithms and compare them.

Reference:
http://epubs.siam.org/doi/abs/10.1137/1.9781611972757.43
http://dl.acm.org/citation.cfm?id=1921593

----------------------------------------------------------

Methology:

Path:
cd /Users/yangbo/Workspaces/MyEclipse\ 10/MovieLensRecommendation/src/movieRecommendation

Format the namenode of hadoop system:
hadoop namenode -format

Start your hadoop file system:
start-all.sh

Leave Safe Mode:
hadoop dfsadmin -safemode leave

Get the training dataset from 10% - 90% of the original dataset
Hadoop jar knn.jar MainDriver gettrainingsubset

Get the evulation dataset from 10% of the original dataset
Hadoop jar knn.jar MainDriver getevulationsubset

Create your reporsitory in your hadoop file system:
hadoop fs -mkdir /input
Training set
hadoop fs -put 10 /input
hadoop fs -put 20 /input
hadoop fs -put 30 /input
hadoop fs -put 40 /input
hadoop fs -put 50 /input
hadoop fs -put 60 /input
hadoop fs -put 70 /input
hadoop fs -put 80 /input
hadoop fs -put 90 /input


Compile your hadoop program:
javac -classpath /Users/yangbo/Documents/hadoop-1.2.1/hadoop-core-1.2.1.jar -d classes MovieRating.java MovieRatingArrayWritable.java CollectUser.java PostingUser.java PostingUserArrayWritable.java ItemPreprocess.java TendencyItemPreprocess.java PostingMovie.java PostingMovieArrayWritable.java UserPreprocess.java TendencyUserPreprocess.java ItemNeighbour.java ItemNeighbourArrayWritable.java ItemKNNMapper.java ItemKNNMapRunner.java ItemKNNMain.java UserNeighbour.java UserNeighbourArrayWritable.java UserKNNMapper.java UserKNNMapRunner.java  UserKNNMain.java SortedArrayList.java HelloWorld.java ItemQuery.java UserQuery.java TendencyQuery.java SlopeOnePreprocess.java SlopeOneTraining.java GetTrainingSubSet.java GetEvulationSubSet.java MainDriver.java

Greate a JAR file:
jar -cvf knn.jar -C classes/ .

Remove your input
hadoop fs -rmr /input

Run the program: countuser->preprocess->KNN->start
Path: /input -> /user/yangbo/Collect -> /user/yangbo/Preprocess

Collect data:
Hadoop jar knn.jar MainDriver collectuser /input

Item-based
Hadoop jar knn.jar MainDriver itempreprocess
Hadoop jar knn.jar MainDriver itemknn
Hadoop jar knn.jar MainDriver startitemquery

User-based
Hadoop jar knn.jar MainDriver userpreprocess
Hadoop jar knn.jar MainDriver userknn
Hadoop jar knn.jar MainDriver startuserquery

Tendency-based
Hadoop jar knn.jar MainDriver tendencyuserpreprocess
Hadoop jar knn.jar MainDriver tendencyitempreprocess
Hadoop jar knn.jar MainDriver starttendencyquery

Slopeone scheme
Hadoop jar knn.jar MainDriver slopeonepreprocess /input
Hadoop jar knn.jar MainDriver slopeonetraining

--------------------------------------------------------

Schedual:

2-16 Preprocess of the DATA:
The structure of the input data is:
userID movieID rate date
After mapreduce, The structure of the output data is:
movieID(key) [userID userAvgRate specificRate](value)

[XXX, Text]->MAP->[LongWritableKEY(movieID), userPostingInfoVALUE(userID, avgRate, rate)]->Reduce->[LongWritableKEY(movieID), LIST of userPostingInfoVALUE]

2-17:
MainDriver (Trigger, choose function to run) + KNNDriverMain(Step two, process of the preprocessed data)

2-23:
Modify the program structure:Three steps for the data process
1. Collect User: Collect User Data from the original dataset
2. Preprocess: preprocess the data based on the collected dataset
3. KNN

2-25:
Finish Collect User and Preprocess

2-26
KNN algorithm to calculate the neighbour of a specific song based on the user information. Assume just one file by now

3-1
Finish the query. Let the user to input the userID and the movieID, if the movie has not been rated, we will predict the 
rating which this user may give to the movie.

4-1
User-based and item-based query complete

4-6
Tendency-based recommendation

4-22
Finish one kind of model-based CF algotirthm. Next step is doing some evluation among these four CL algorithms:
2 memory-based algorithm (user-based & item-based, knn algorithm)
1 model-based algorithm (slope one algorithm)
1 new algorithm (tendency-based algorithm)

4-26
Finish generating the training dataset and evulation dataset, which are used to compare different algorithms


